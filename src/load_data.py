# read the data from data source
# save it in the data/raw for further process
import os
from get_data import GetData
import argparse
from logger import AppLogger

class LoadSaveData:
    """
    This class is used to load the data and save the data to a new location.
    """

    def __init__(self):
        self.logger = AppLogger()
        self.get_data = GetData()

    def load_and_save(self, config_path):
        """
        This method is used to load the data and save the file to data/raw folder
        :param: config_path
        """

        try:
            file = open("Logs/GeneralLog.txt", "a")
            config = self.get_data.read_params(config_path)
            df = self.get_data.get_data(config_path)
            new_cols = [col.replace(" ", "_") for col in df.columns]
            raw_data_path = config["load_data"]["raw_dataset_csv"]
            df.to_csv(raw_data_path, sep=",", index=False, header=new_cols)
            self.logger.log(file, f"Successfully moved the file to:  {raw_data_path}")
            file.close()


        except Exception as e:
            file = open("Logs/GeneralLog.txt", "a")
            self.logger.log(file, f"Exception occurred while moving the csv file, {e}")
            file.close()
            raise e


if __name__ == "__main__":
    args = argparse.ArgumentParser()
    args.add_argument("--config", default="params.yaml")
    parsed_args = args.parse_args()
    load_data = LoadSaveData()
    load_data.load_and_save(config_path=parsed_args.config)