import pandas as pd
import numpy as np
from logger import AppLogger
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import mutual_info_classif
import matplotlib.pyplot as plt


class FeatureSelection:
    def __init__(self):
        self.logger = AppLogger()
        self.file = open("Logs/FeatureSelectionLog.txt", "a")

    def selectKFeatures(self, data):
        """
        This class is used to select top 20 features using mutual_info_classif
        :return: new dataframe with 20 best features
        """
        try:
            X = data.drop(columns="Class")
            y = data["Class"]
            X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
            self.logger.log(self.file, "Successfully split the train and test data")
            info_score = mutual_info_classif(X_train, y_train, random_state=42)
            self.logger.log(self.file, "Successfully calculated the mutual_info score")
            fs = pd.Series(info_score)
            fs.index = X_train.columns
            # Selecting the best 20 features
            info_features = fs.nlargest(20).sort_values(ascending=False).index
            self.logger.log(self.file, "Successfully captured top 20 best features with highest mutual_info score")
            # Plotting bar graph for features to check features providing highest info
            fs.sort_values(ascending=False).plot.bar()
            plt.savefig("mutual_info_image/mutual_info.png")
            self.logger.log(self.file, "Successfully saved  mutual_info png")
            # New dataframe with top 20 features
            df = pd.DataFrame(data[info_features])
            df["Class"] = data["Class"]
            self.logger.log(self.file, f"New dataframe with top 20 features: {info_features}")
            self.logger.log(self.file, "Exited the FeatureSelection class")
            self.file.close()
            return df

        except Exception as e:
            self.logger.log(self.file, f"Error occurred during execution {e}")
            self.file.close()
            raise e

