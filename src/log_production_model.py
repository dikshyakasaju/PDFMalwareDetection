from get_data import GetData
import argparse
import mlflow
from mlflow.tracking import MlflowClient
from pprint import pprint
import joblib
import os
from logger import AppLogger

class ProductionModel:
    """
    This class shall be used to keep logs of model and productionize it.
    """
    def __init__(self):
        self.logger = AppLogger()
        self.get_data = GetData()
        self.file = open("Logs/ModelProductionLog.txt", "a")



    def log_production_model(self, config_path):
        try:
            config = self.get_data.read_params(config_path)
            mlflow_config = config["mlflow_config"]
            model_name = mlflow_config["registered_model_name"]
            remote_server_uri = mlflow_config["remote_server_uri"]

            mlflow.set_tracking_uri(remote_server_uri)

            runs = mlflow.search_runs(experiment_ids="1")
            # Finding the highest ROC_AUC score
            highest = runs["metrics.ROC_AUC"].sort_values(ascending=False)[0]
            highest_run_id = runs[runs["metrics.ROC_AUC"] == highest]["run_id"][0]

            self.logger.log(self.file, "Entered the function to find the best model for production")
            client = MlflowClient()
            # Search for model versions in backend that satisfy the filter criteria.
            for mv in client.search_model_versions(f"name='{model_name}'"):
                mv = dict(mv)
                if mv["run_id"] == highest_run_id:
                    current_version = mv["version"]
                    logged_model = mv["source"]
                    pprint(mv, indent=4)

                    # The best model will be in the Production stage along with the version number
                    client.transition_model_version_stage(
                        name=model_name,
                        version=current_version,
                        stage="Production"
                    )
                # All other models will be in the Staging stage
                else:
                    current_version = mv["version"]
                    logged_model = mv["source"]
                    pprint(mv, indent=4)
                    client.transition_model_version_stage(
                        name=model_name,
                        version=current_version,
                        stage="Staging"
                    )
            self.logger.log(self.file, f"Best model is: {logged_model}")
            # Loading the production model and copying it to prediction_service directory
            loaded_model = mlflow.pyfunc.load_model(logged_model)
            model_path = config["webapp_model_dir"]
            joblib.dump(loaded_model, model_path)

            self.logger.log(self.file, f"Best model stored at: {model_path}")
            self.file.close()

        except Exception as e:
            self.logger.log(self.file, f"Error occurred: {e}")
            self.file.close()
            raise e




if __name__ == "__main__":
    args = argparse.ArgumentParser()
    args.add_argument("--config", default="params.yaml")
    parsed_args = args.parse_args()
    log_model = ProductionModel()
    log_model.log_production_model(config_path=parsed_args.config)