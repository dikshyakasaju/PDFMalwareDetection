from get_data import GetData
import argparse
from logger import AppLogger
from preprocessing import Preprocessor
import pandas as pd
import numpy as np


class PreprocessData:
    """
    This class shall preprocess the data before splitting the data into train and test set.
    """

    def __init__(self):
        self.logger = AppLogger()
        self.get_data = GetData()
        self.preprocessor = Preprocessor()
        self.file = open("Logs/GeneralLog.txt", "a")

    def preprocess_data(self, config_path):
        try:
            config = self.get_data.read_params(config_path)
            raw_data_path = config["load_data"]["raw_dataset_csv"]
            processed_data_path = config["preprocess_data"]["preprocessed_dataset_path"]
            df = pd.read_csv(raw_data_path, sep=',')
            self.logger.log(self.file, "Dataframe loaded successfully!")
            # Remove unnecessary columns
            cols_to_drop = ["Fine_name", "JS", "endobj", "pages"]
            df = self.preprocessor.remove_columns(data=df, columns=cols_to_drop)
            self.logger.log(self.file, f"{cols_to_drop} columns dropped successfully!")
            # Encode categorical features
            df = self.preprocessor.encodeCategoricalFeatures(df)
            self.logger.log(self.file, "Values encoded successfully!")
            # Clean data
            df = self.preprocessor.CleanData(df)
            self.logger.log(self.file, "Data cleaning successful!")
            # Impute missing values
            df = self.preprocessor.impute_missing_values(df)
            self.logger.log(self.file, "Missing values imputation successful!")
            df = df.astype("float")
            self.logger.log(self.file, "Data type conversion successful!")
            # Saving the preprocessed data
            df.to_csv(processed_data_path, sep=",", index=False, encoding="utf-8")
            self.logger.log(self.file, f"Preprocessed data saved successfully: {processed_data_path}")
            self.file.close()

        except Exception as e:
            self.logger.log(self.file, f"Error occurred while preprocessing: {e}")
            self.file.close()
            raise e




if __name__ == "__main__":
    args = argparse.ArgumentParser()
    args.add_argument("--config", default="params.yaml")
    parsed_args = args.parse_args()
    process = PreprocessData()
    process.preprocess_data(config_path=parsed_args.config)