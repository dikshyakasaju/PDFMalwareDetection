# Preprocess the data
import os
import pickle
import pandas as pd
import numpy as np
from logger import AppLogger
from sklearn.preprocessing import LabelEncoder


class Preprocessor:
    """
    This class shall be used to clean and transform the data before training.
    """
    def __init__(self):
        self.logger = AppLogger()


    def remove_columns(self, data, columns):
        """
        This method removes unnecessary cols
        :return: new dataframe
        """

        self.data = data
        self.columns = columns
        try:
            file = open("Logs/PreprocessingLog.txt", "a")
            self.useful_data = self.data.drop(columns=self.columns)
            self.logger.log(file, f'Columns dropped successfully {self.columns}')
            file.close()
            return self.useful_data

        except Exception as e:
            file = open("Logs/PreprocessingLog.txt", "a")
            self.logger.log(file, f"Exception occurred in remove_columns method of the Preprocessor class. Exception message: {e}")
            file.close()
            raise e

    def encodeCategoricalFeatures(self, data):
        """
        This method encodes all the categorical values and returns new dataframe.
        """
        try:
            # Converting target features as -1 for Benign and 1 for malicious
            file = open("Logs/PreprocessingLog.txt", "a")
            data["Class"] = data["Class"].map({"Malicious": 1, "Benign": -1})
            self.logger.log(file, "Target column encoded successfully!!!")

            # Using frequency encoding on header feature as the  cardinality is high
            header = data["header"].value_counts().to_dict()
            data['header'] = data['header'].map(header)
            self.logger.log(file, '"Header" feature encoded successfully!!!')

            # Replacing -1 with "No" and 0 with "Yes" in text column as text should have only 3 categories, yes, no or unclear
            data["text"] = data["text"].map({"-1": "No", "0": "Yes", "No": "No", "Yes": "Yes", "unclear": "unclear"})
            data = pd.get_dummies(data, columns=['text'], drop_first=True)
            self.logger.log(file, '"text" feature encoded successfully!!!')
            self.logger.log(file, 'Exiting the "encodeCategoricalFeatures" class after successful execution')
            file.close()

            return data

        except Exception as e:
            file = open("Logs/PreprocessingLog.txt", "a")
            self.logger.log(file, f'Feature encoding unsuccessful: {e}')
            file.close()
            raise e


    def encodeTargetColumn(self, data):
        """
        This method encodes all the label feature
        """
        try:
            # Converting target features as -1 for Benign and 1 for malicious
            file = open("Logs/PreprocessingLog.txt", "a")
            encode = LabelEncoder().fit(data['Class'])
            data["Class"] = encode.transform(data["Class"])
            self.logger.log(file, 'Target label encoded successfully!!!')
            # Saving the encoder model to decode the value at the time of prediction
            # Creating a folder to save the model
            os.makedirs("encoder_model", exist_ok=True)
            with open("encoder_model/enc.pickle", "wb") as f:
                pickle.dump(encode, f)
                self.logger.log(file, f'Model saved successfully in: {f}')

            return data

        except Exception as e:
            file = open("Logs/PreprocessingLog.txt", "a")
            self.logger.log(file, f'Feature encoding unsuccessful: {e}')
            file.close()
            raise e



    def CleanData(self, data):
         """
                 This method will remove unnecessary characters from numerical features and impute with np.nan
         """

         self.characters = ["1(1)", "(most", "_Pro_Rodeo_Pix_'", "_Pro_Rodeo_Pix_", "pdfid.py", "pdfHeader)",
                       "bytes[endHeader])", "bytes[endHeader]", "53(2)", "2(2)", "2(1)", "5(1)", "list", "3(1)", "34(2)",
                        ">", "2(2)", "12(2)", "12(2)", "29(2)"]

         try:
             file = open("Logs/PreprocessingLog.txt", "a")
             for feature in data.columns:
                for char in self.characters:
                    data[feature] = np.where(data[feature] == char, np.nan, data[feature])
             self.logger.log(file, 'Data cleaning successful')
             file.close()
             return data

         except Exception as e:
             file = open("Logs/PreprocessingLog.txt", "a")
             self.logger.log(file, f'Data cleaning unsuccessful: {e}')
             file.close()
             raise e



    def impute_missing_values(self, data):
        """
        This method will perform mode imputation on the missing data
        """

        try:
            file = open("Logs/PreprocessingLog.txt", "a")
            for features in data.columns:
                data[features] = np.where(data[features].isnull(), data[features].mode(), data[features])
            self.logger.log(file, 'Mode imputation successful')
            return data
            file.close()

        except Exception as e:
            file = open("Logs/PreprocessingLog.txt", "a")
            self.logger.log(file, f'Error in cleaning data {e}')
            file.close()
            raise e








