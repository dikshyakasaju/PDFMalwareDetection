import pandas as pd
from get_data import GetData
import argparse
from logger import AppLogger
from SelectKFeatures import FeatureSelection




class SelectFeatures:

    def __init__(self):
        self.logger = AppLogger()
        self.get_data = GetData()
        self.file = open("Logs/FeatureSelectionLog.txt", "a")
        self.feature = FeatureSelection()


    def feature_selection(self, config_path):
        try:
            config = self.get_data.read_params(config_path)
            data_path = config["preprocess_data"]["preprocessed_dataset_path"]
            new_data_path = config["feature_selection"]["preprocessed_dataset_path"]
            df = pd.read_csv(data_path, sep=',')
            self.logger.log(self.file, "Successfully loaded the dataframe")
            # Selecting the 20 best features
            df = self.feature.selectKFeatures(df)
            df.to_csv(new_data_path, sep=",", index=False, encoding="utf-8")
            self.logger.log(self.file, f"New dataframe saved to {new_data_path}")
            self.file.close()

        except Exception as e:
            self.logger.log(self.file, f"Error occurred during execution {e}")
            self.file.close()
            raise e





if __name__ == "__main__":
    args = argparse.ArgumentParser()
    args.add_argument("--config", default="params.yaml")
    parsed_args = args.parse_args()
    select_features = SelectFeatures()
    select_features.feature_selection(config_path=parsed_args.config)