import pandas as pd
from get_data import GetData
import argparse
from logger import AppLogger
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import mutual_info_classif
import matplotlib.pyplot as plt


class SelectFeatures:

    def __init__(self):
        self.logger = AppLogger()
        self.get_data = GetData()
        self.file = open("Logs/FeatureSelectionLog.txt", "a")


    def feature_selection(self, config_path):
        try:
            config = self.get_data.read_params(config_path)
            data_path = config["preprocess_data"]["preprocessed_dataset_path"]
            new_data_path = config["feature_selection"]["preprocessed_dataset_path"]
            df = pd.read_csv(data_path, sep=',')
            self.logger.log(self.file, "Successfully loaded the dataframe")
            # Separating independent and dependent features
            X = df.drop(columns="Class")
            y = df["Class"]
            # train_test_split before feature selection
            X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
            self.logger.log(self.file, "Successfully split the train and test data")
            info_score = mutual_info_classif(X_train, y_train)
            self.logger.log(self.file, "Successfully calculated the mutual_info score")
            fs = pd.Series(info_score)
            fs.index = X_train.columns
            # Selecting the best 20 features
            info_features = fs.nlargest(20).sort_values(ascending=False).index
            self.logger.log(self.file, "Successfully captured top 20 best features with highest mutual_info score")
            # Plotting bar graph for features to check features providing highest info
            fs.sort_values(ascending=False).plot.bar()
            plt.savefig("mutual_info_image/mutual_info.png")
            self.logger.log(self.file, "Successfully saved  mutual_info png")
            # New dataframe with top 20 features
            df = df[info_features]
            df["Class"] = y
            self.logger.log(self.file, f"New dataframe with top 20 features: {info_features}")
            df.to_csv(new_data_path, sep=",", index=False, encoding="utf-8")
            self.logger.log(self.file, f"New dataframe saved to {new_data_path}")
            self.file.close()

        except Exception as e:
            self.logger.log(self.file, f"Error occurred during execution {e}")
            self.file.close()
            raise e





if __name__ == "__main__":
    args = argparse.ArgumentParser()
    args.add_argument("--config", default="params.yaml")
    parsed_args = args.parse_args()
    select_features = SelectFeatures()
    select_features.feature_selection(config_path=parsed_args.config)